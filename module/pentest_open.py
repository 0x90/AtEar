__author__ = 'root'
import network
from aircrack import Attack
from brute_force import brute_text_create

class auto_pentest(object):
    def __init__(self, iface, json_object):
        self.object = json_object
        self.time = json_object['timeout']
        self.iface = iface
        self.conn_host_info = json_object['conn_host_info']
        self.public_ip_get = json_object['public_ip_info']
        self.brute_min_len = json_object['bruteforce_minlength']
        self.brute_max_len = json_object['bruteforce_maxlength']
        self.brute_number = json_object['bruteforce_number']
        self.brute_space = json_object['bruteforce_space']
        self.brute_special = json_object['bruteforce_special']
        self.brute_string = json_object['bruteforce_strings']
        self.dict_password = json_object['dictionary_password']
        self.dict_user = json_object['dictionary_user']
        self.result_value = '['

    def run(self):
        time = int(self.time) / int(len(self.object['aplist']))
        self.create_brtue_text()
        for i in xrange(0, len(self.object['aplist'])):
            channel = self.object['aplist'][i]['channel']
            bssid = self.object['aplist'][i]['bssid']
            essid = self.object['aplist'][i]['essid']
            enc_type = self.object['aplist'][i]['enc_type']
            ap_crack = Attack(self.iface, channel, bssid, essid, enc_type, timeout=time)
            ap_crack.run()
            ap_values = ap_crack.get_value()
            if ap_values['key']:
                if network.set_new_connection(essid, ap_values['key'], self.iface):
                    if self.public_ip_get:
                        public_ip = network.myip()
                    if self.conn_host_info:
                        conn_host = network.network_host_ip(self.iface)
            self.result_value += {'essid': ap_values['essid'], 'bssid': ap_values['bssid'], 'inject_T': ap_values['inject_T'],
                                  'fake_auth_T': ap_values['fake_auth_T'], 'arp_req_T': ap_values['arp_req_T'], 'key': ap_values['key'],
                                  'public_ip': public_ip, 'conn_host_info': conn_host},
            ap_crack.stop()

        self.result_value = self.result_value[:-1] + ']'

    def create_brtue_text(self):
        text = brute_text_create(self.brute_min_len, self.brute_max_len, self.brute_string, self.brute_number,
                                      self.brute_special, self.brute_space)
        f = open('/tmp/password.lst', 'w')
        for t in text:
            f.write(t)
        f.close()

    def get_values(self):
        return self.result_value